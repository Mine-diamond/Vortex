name: Build-Windows-Installer
# 测试每次修改后的代码是否能正常构建exe文件

on:
  push:                      # 任意commit后触发
  workflow_dispatch:         # 允许手动触发

env:
  APP_NAME: Vortex
  # APP_VERSION: 1.0.0
  MAIN_JAR: Vortex-1.0.0.jar
  MAIN_CLASS: tech.minediamond.vortex.Launcher

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. 拉代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 获取最新的 git tag 作为版本号
      - name: Get version from latest git tag
        shell: bash
        run: |
          # 获取最新的 tag（按版本排序）
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          # 移除 'v' 前缀得到版本号
          VERSION=${LATEST_TAG#v}
          
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "MAIN_JAR=${{ env.APP_NAME }}-$VERSION.jar" >> $GITHUB_ENV
          echo "Latest tag: $LATEST_TAG"
          echo "Using version: $VERSION"

      # 3. Liberica 21（full = 自带 JavaFX + jpackage）
      - name: Set up Liberica JDK 21-full
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: '21'
          architecture: x64
          java-package: jdk-full
          cache: maven

      # 4. Maven Build（产生 fat-jar）
      - name: Build with Maven
        run: mvn -B clean package "-Drevision=${{ env.APP_VERSION }}"

      # 5. jpackage 生成 app-image（绿色版）
      - name: jpackage – create app-image
        shell: pwsh
        run: |
          # 1. 创建一个干净的临时目录用于 jpackage 输入
          $stagingDir = "staging"
          New-Item -ItemType Directory -Force -Path $stagingDir
          
          # 2. 只复制需要的 fat-jar 到该目录
          Copy-Item -Path "target\${{ env.MAIN_JAR }}" -Destination $stagingDir
          
          # 3. 创建 app-image 的输出目录
          New-Item -ItemType Directory -Force -Path build\app
          jpackage `
            --name "${{ env.APP_NAME }}" `
            --input $stagingDir `
            --main-jar "${{ env.MAIN_JAR }}" `
            --main-class "${{ env.MAIN_CLASS }}" `
            --type app-image `
            --dest build\app `
            --icon packaging\windows\app_icon.ico `
            --app-version "${{ env.APP_VERSION }}" `
            --app-content  everything `
            --module-path "$env:JAVA_HOME\jmods" `
            --add-modules ALL-MODULE-PATH `
            --java-options "-DAPP_ENV=prod" 

      # 6. 使用 Minionguyjpro/Inno-Setup-Action 编译安装包
      - name: Compile Installer with Inno Setup Action
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          # 指定 .iss 文件路径
          path: setup.iss
          # 通过 options 参数把动态变量传给 Inno Setup
          options: /DAppName="${{ env.APP_NAME }}" /DAppVersion="${{ env.APP_VERSION }}"

      # 7. 上传产物
      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: Vortex-installer
          path: |
            Output\Vortex-Setup.exe
