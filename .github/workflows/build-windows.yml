name: Build-Windows-Installer

on:
  push:
    branches: [ "main" ]     # 也可改成 release/* 等
  workflow_dispatch:         # 允许手动触发

env:
  APP_NAME: Vortex
  APP_VERSION: 1.0.0         # 可写死，也可读取 pom.xml
  MAIN_JAR: Vortex-1.0.0.jar
  MAIN_CLASS: tech.mineyyming.vortex.Main

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. 拉代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Liberica 21（full = 自带 JavaFX + jpackage）
      - name: Set up Liberica JDK 21-full
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: '21'
          architecture: x64
          cache: maven

      # 3. Maven Build（产生 fat-jar）
      - name: Build with Maven
        run: mvn -B clean package

      # 4. jpackage 生成 app-image（绿色版）
      - name: jpackage – create app-image
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path build\app
          jpackage `
            --name "${{ env.APP_NAME }}" `
            --input target `
            --main-jar "${{ env.MAIN_JAR }}" `
            --main-class "${{ env.MAIN_CLASS }}" `
            --type app-image `
            --dest build\app `
            --icon src\main\resources\images\app_icon.png `
            --win-menu `
            --win-shortcut `
            --app-version "${{ env.APP_VERSION }}" `
            --add-modules javafx.controls,javafx.fxml

      # 5. 安装 Inno Setup（脚本编译器 iscc）
      - name: Set up Inno Setup
        uses: crazy-max/ghaction-inno-setup@v2

      # 6. 编译安装包
      - name: Inno Setup – build installer
        run: iscc setup.iss

      # 7. 上传产物
      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: Vortex-installer
          path: |
            Output\Vortex-Setup.exe
