<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tech.minediamond</groupId>
    <artifactId>Vortex</artifactId>
    <version>1.0.0</version>

    <!-- 项目元数据 -->
    <name>Vortex</name>
    <description>Vortex is a software for quickly opening programs and files</description>
    <url>https://github.com/Mine-diamond/Vortex</url>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <licenses>
        <license>
            <name>GNU General Public License, version 2 (GPL-2.0)</name>
            <url>https://www.gnu.org/licenses/old-licenses/gpl-2.0.html</url>
            <distribution>repo</distribution>
        </license>
    </licenses>


    <dependencies>

        <!--  ControlsFX -->
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>11.2.2</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId> <!-- 使用星号(*)排除所有来自org.openjfx的传递性依赖 -->
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>

        <!-- JNA Core -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>5.17.0</version>
        </dependency>

        <!-- JNA Platform-specific library -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna-platform</artifactId>
            <version>5.17.0</version>
        </dependency>


        <!-- jackson - JSON处理库 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.18.4</version>
        </dependency>

        <!--SQLite - 轻量数据库 -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.49.1.0</version>
        </dependency>

        <!--mslinks - 快捷方式解析 -->
        <dependency>
            <groupId>com.github.vatbub</groupId>
            <artifactId>mslinks</artifactId>
            <version>1.0.6.2</version>
        </dependency>

        <!--jnativehook - 全局键鼠监听器 -->
        <dependency>
            <groupId>com.github.kwhat</groupId>
            <artifactId>jnativehook</artifactId>
            <version>2.2.2</version>
        </dependency>

        <dependency>
            <groupId>org.fxmisc.richtext</groupId>
            <artifactId>richtextfx</artifactId>
            <version>0.11.5</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId> <!-- 使用星号(*)排除所有来自org.openjfx的传递性依赖 -->
                </exclusion>
            </exclusions>
        </dependency>

        <!--托盘与通知-->
        <dependency>
            <groupId>com.dustinredmond.fxtrayicon</groupId>
            <artifactId>FXTrayIcon</artifactId>
            <version>4.2.3</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId> <!-- 使用星号(*)排除所有来自org.openjfx的传递性依赖 -->
                </exclusion>
            </exclusions>
        </dependency>


        <!-- SLF4J API -->
        <!-- Logback Classic会自动引入slf4j-api，所以这个可以不写，但为了清晰，写上也可以 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.17</version>
        </dependency>

        <!-- Logback 实现 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.5.18</version> <!-- 保持和SLF4J版本兼容 -->
        </dependency>

        <!-- Janino -->
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
            <version>3.1.12</version>
        </dependency>

        <!--  JUL → SLF4J 桥接器 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>2.0.17</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- 1. Maven编译器插件 -->
            <!-- 明确配置编译器，确保它能正确处理模块化项目 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <annotationProcessorPaths>
                        <!-- 明确指定 Lombok 作为注解处理器 -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>1.18.34</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <!-- 关键：为 Lombok 打开必要的模块访问权限 -->
                        <arg>--add-opens</arg>
                        <arg>jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
                        <arg>--add-opens</arg>
                        <arg>jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
                        <arg>--add-opens</arg>
                        <arg>jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
                        <arg>--add-opens</arg>
                        <arg>jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>
                        <arg>--add-opens</arg>
                        <arg>jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- 2. Maven依赖插件 -->
            <!-- 这是核心！这个插件负责将所有项目依赖的JAR包复制到指定目录 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.6.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase> <!-- 在Maven的package阶段执行 -->
                        <goals>
                            <goal>copy-dependencies</goal> <!-- 目标是复制依赖 -->
                        </goals>
                        <configuration>
                            <!--
                                指定输出目录。
                                ${project.build.directory} 就是 'target' 目录。
                                所以这会把所有依赖JAR复制到 'target/dependencies' 文件夹下。
                                这就是我们为jpackage准备的“工具仓库”。
                            -->
                            <outputDirectory>${project.build.directory}/dependencies</outputDirectory>
                            <includeScope>runtime</includeScope> <!-- 只复制运行时需要的依赖 -->
                            <excludeArtifactIds>okio</excludeArtifactIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 3. Maven JAR 插件 (可选，但推荐) -->
            <!-- 确保生成的JAR的MANIFEST.MF文件中包含主类信息 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>tech.minediamond.vortex.Launcher</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>