<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- 关闭钩子 -->
    <shutdownHook class="ch.qos.logback.core.hook.DefaultShutdownHook"/>

    <!-- 1. 定义变量，方便后面引用 -->
    <property name="LOG_DIR" value="logs" />
    <property name="CONSOLE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %cyan([%thread]) %yellow(%logger) - %msg%n" />
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger - %msg%n" />

    <!-- 读取系统属性 APP_ENV, 如果系统属性不存在，它会有一个默认值 "dev" -->
    <property name="APP_ENV" value="${APP_ENV:-dev}" />

    <!-- 2. Appender: 定义日志输出的目的地 -->

    <!-- 2.1 ConsoleAppender: 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.out</target>
        <encoder>
            <!-- 格式化日志输出 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 2.2 RollingFileAppender: 输出到滚动文件 -->
    <appender name="FILE_SYNC" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前日志文件的路径 -->
        <file>${LOG_DIR}/application.log</file>

        <!-- 滚动策略：基于时间和大小 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 归档文件的命名格式 -->
            <fileNamePattern>${LOG_DIR}/%d{yyyy-MM}/application-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!-- 每个日志文件最大10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 日志文件最多保存30天 -->
            <maxHistory>30</maxHistory>
            <!-- 所有归档文件总大小不超过1GB -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 异步日志包装器 (真正暴露给 root logger 的 appender) -->
    <appender name="FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 队列大小，默认256 -->
        <queueSize>1024</queueSize>
        <!-- 当队列剩余空间小于0%时，丢弃 TRACE, DEBUG, INFO 级别的日志，防止队列溢出 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 永远不会阻塞主线程 -->
        <neverBlock>true</neverBlock>
        <!-- 引用真正的文件写入器 -->
        <appender-ref ref="FILE_SYNC" />
    </appender>

    <!-- 3. Logger: 定义哪些包使用哪个Appender，以及日志级别 -->

    <logger name="javafx.css" level="WARN" />
    <logger name="com.github.kwhat.jnativehook" level="WARN" />
    <logger name="tech.mineyyming.vortex" level="DEBUG" />

    <!-- 4. Root Logger: 根记录器，所有logger的父级 -->

    <if condition='property("APP_ENV").equalsIgnoreCase("prod")'>
        <!-- 如果 APP_ENV 的值是 "prod" (忽略大小写) -->
        <then>
            <!-- 生产环境 (prod) 配置 -->
            <root level="INFO">
                <appender-ref ref="FILE" />
            </root>
        </then>
        <!-- 否则 (即 APP_ENV 不是 "prod", 或者是 "dev", 或者未设置) -->
        <else>
            <!-- 开发环境 (dev) 配置 -->
            <root level="DEBUG">
                <appender-ref ref="CONSOLE" />
                <appender-ref ref="FILE" />
            </root>
        </else>
    </if>


</configuration>
